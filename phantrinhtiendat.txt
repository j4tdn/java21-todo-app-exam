1.
git init
touch c1.txt
git add c1.txt
git commit -m "c1.txt"

touch c2.txt
git add c2.txt
git commit -m "c2.txt"

touch c3.txt
git add c3.txt
git commit -m "c3.txt"

git checkout -b feature master
touch c4.txt
git add c4.txt
git commit -m "c4.txt"

touch c5.txt
git add c5.txt
git commit -m "c5.txt"

git checkout -b bug master
touch c6.txt
git add c6.txt
git commit -m "c6.txt"

touch c7.txt
git add c7.txt
git commit -m "c7.txt"

touch c8.txt
git add c8.txt
git commit -m "c8.txt"
--------------------------------------------------------------------------
2. Viết lệnh thực hiện gộp nhánh bug vào nhánh feature sử dụng git merge?
git checkout feature
git merge bug 
**) trong trường hợp hai nhánh bug và feature ở hai hướng khác nhau thì
có thể xảy ra conflicts, ta cần fix bug các file có conflicts với nhau 
sau đó mới thực hiện cú pháp merge 
--------------------------------------------------------------------------
3. Viết lệnh thực hiện gộp nhánh feature vào bug sử dụng git rebase?
git checkout bug
git rebase feature
--------------------------------------------------------------------------
4. Phân biệt git merge và git rebase(giống, khác nhau, khi nào nên sử dụng)?
Giống nhau: 
+ đều dùng để gộp nhánh
+ giống nhau khi gộp 2 nhánh trên 1 đường thẳng
Khác nhau: Khi gộp 2 nhánh rẽ hướng
Merge: 
     + Gộp nội dung ở 2 commits mới nhất từ 2 nhánh và so sánh từ commit cha
     + Fix 1 lần duy nhất nếu bị conflict
       Luôn tạo ra commit mới (commit-merge)
Rebase: 
     + Replay your works(commit bên nhánh target(lưu trữ)) on top of base-branch
     + Gộp từng commit bên nhánh target vào top of base branch
     + Có thể bị conflict nhiều lần nếu có nhiều your commits
     + Không tạo ra commit mới(số lượng)


--------------------------------------------------------------------------
5. Phân biệt git fetch và git clone
+ git fetch: dùng để cập nhật tài liệu, source code mới nhất từ remote reposity
để quá trình thao tác giữa máy local và remote không mắc conflicts ( vd: push 
, merge,......)
+ git clone: nêu một máy local chưa hề có tài liệu, source code liên quan
đến dự án đang thực hiện thì máy local đó cần thực hiện lệnh git clone để
đồng bộ tài liệu của dự án từ máy remote
--------------------------------------------------------------------------
6. Phân biệt git fetch và git pull?
- git fetch dùng để đồng bộ trạng thái mới nhất của dự án
- git pull tương tự git fetch nhưng sau khi đồng bộ thì thực hiện git merge
nên từ đó có thể khiến local repo gặp xung đột.
--------------------------------------------------------------------------
7. Phân biệt git pull và git pull --rebase?
git pull = git fetch + git merge
git pull --rebase = git fetch + git rebase
--------------------------------------------------------------------------
8. Git log dùng để làm gì?
git log dùng để xem lại lịch sử cập nhất của các commit
--------------------------------------------------------------------------
9. Git status dùng để làm gì?
git status dùng để kiểm tra trạng thái của các file 
--------------------------------------------------------------------------
10. Git add dùng để làm gì?
git add dùng để chuyển trạng thái của một file đang ở trạng thái untracked hoặc
modified xong trạng thái staged để sau đó commit tạo thành một phiên bản của
source code.
--------------------------------------------------------------------------
11. Git commit dùng để làm gì?
git commit dùng để tạo ra một commit(phiên bản) mới của dự án
--------------------------------------------------------------------------
12. Mô tả lệnh để tạo branch ở local?
vd: tạo branch task-sub từ master
git checkout -b task-sub master
--------------------------------------------------------------------------
13. Mô tả lệnh để xóa branch ở local?
vd: xóa nhánh todo-app-1.0
git checkout todo-app-1.0
git branch -D todo-app-1.0
--------------------------------------------------------------------------
14. Mô tả lệnh để xóa branch ở remote?
vd: xóa nhánh task-sub
git push origin --delete task-sub
--------------------------------------------------------------------------
15. Nhánh trung gian là gì?
- Là nhánh được tạo ra như bản sao của các nhánh ở remote khi ta đồng bộ dự
án từ remote về máy local 
  *) không thể thực hiện chức năng trên nhánh trung gian mà phải tạo một 
nhánh mới ở local từ nó
--------------------------------------------------------------------------
16. Detach HEAD là gì? -- Chịu luôn á anh
--------------------------------------------------------------------------
17. Phân biệt HEAD và BRANCH?
HEAD: là nơi ta đang thực hiện chức năng, nếu muốn làm việc ở branch nào
thì ta phải dùng lệnh git checkout để đứa con trỏ HEAD đến branch đó
BRANCH: branch được xem là một phiên bản của dự án ( dùng để support thuận
tiện hơn khi ta muốn fix bug hoặc nâng cấp chức năng từ phiên bản cũ của dự án )
--------------------------------------------------------------------------
18. Có mấy cách để xóa commit, mô tả và cho ví dụ?
Crying --> Loading


--------------------------------------------------------------------------
19. Liệt kê các trạng thái của file trong git, giải thích từng trạng thái?
untracked: trạng thái khi file mới được khởi tạo
unmodified: trạng thái của file sau khi commit
modified: trạng thái của file đã được chỉnh sửa sau khi commit
staged: trạng thái sẵn sàng để commit tạo ra một phiên bản
--------------------------------------------------------------------------
20. Mô tả các bước cần thực hiện khi nhận 1 task từ dự án, cho ví dụ?
B1: Xác định task đó đang thuộc version nào của dự án
B2: Xác định version đó đang được code ở trên branch nào
B3: git fetch [origin] – đồng bộ remote branch về nhánh trung gian
(không nhất thiết phải đồng bộ toàn bộ dự án)
B4: Tạo nhánh ở local từ nhánh trung gian
B5: Thực hiện yêu cầu
coding …
git add, git commit
git push... *) nếu xảy ra trường hợp rejected thì dùng (git fetch/merge or 
rebase) đến khi push thành công 
   vd: nhận task-edit từ branch App-1.0 của version: Todo-app-1.0
B1 + 2: version: Todo-app-1.0
        branch:  App-1.0
B3: git fetch origin App-1.0
B4: git checkout -b task-new origin/App-1.0
B5: touch,notepad, ....git add, git commit,....
    git fetch
    git push origin HEAD:Todo-app-1.0



