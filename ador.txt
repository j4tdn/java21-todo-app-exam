1. Viết chương trình/lệnh trong tập tin hoten.txt mô tả các bước thực hiện sơ đồ git tree sau đây
tại local
Trả lời:
 1.1) Tạo kho chứa repository:
	Lệnh: git init
 1.2)Tại Commit1 tạo chức năng c1.txt
	touch c1.txt  // tạo file
	git add c1.txt  // add vào stage
	git commit -m "Add C1 function" // Commit vào kho chứa
 1.3) Tại commit 2 tương tự như mục 1.2
	touch c2.txt
	git add c2.txt
	git commit -m "Add C2 function"
 1.4) Tại commit 3 tương tự như mục 1.2
	touch c3.txt
	git add c3.txt
	git commit -m "Add C3 function"
 1.5) Vì ở hai commit4,5 thuộc nhánh feature nên tại commit số 3 cần tạo branch cho 2 commit4 và 5
	branch của commit4,5 sẽ đi ra từ commit3(hay còn gọi là phát triển từ nhánh master)
	Để thực hiện ta dùng lệnh: git checkout -b feature master
	=> như vậy đã tạo được nhánh feature và vừa chuyển HEAD qua nhánh feature
 1.6) Sau đó thực hiện tạo commit4 và commit5
   .Commit số 4: 
	touch c4.txt
	git add c4.txt
	git commit -m "Add C4 function"
   .Commit số 5: 
	touch c5.txt
	git add c5.txt
	git commit -m "Add C5 function"
	=> Xong nhánh feature
 1.7) Bug phát sinh từ nhánh master(ở commit3) nên ta sẽ tạo nhánh fix bug từ nhánh master(commit3)
    =>Lệnh thực hiện: git checkout -b bug master
	Sau đó thực hiện tạo các commit lần lượt là 6,7,8.
	Cách thực hiện cũng như ở các lệnh commit ở trên:
	touch c6.txt
	git add c6.txt
	git commit -m "Add C6 function"
	
	touch c7.txt
	git add c7.txt
	git commit -m "Add C7 function"

	touch c8.txt
	git add c8.txt
	git commit -m "Add C8 function"

2. Viết lệnh thực hiện gộp nhánh bug vào nhánh feature sử dụng git merge
 
 => Dùng lệch git merge để gộp 2 nhánh lại
  Để gộp nhánh bug vào nhánh feature đầu tiên ta phải đưa HEAD qua nhánh cần gộp sau mới gộp vào.
  Thực hiện:
   git checkout feature
   git merge bug
   // Khi đó vì hai nhánh không có chức năng trùng nhau cũng như là không bị conflict nên sẽ merge thành công luôn

3. Viết lệnh thực hiện gộp nhánh feature vào bug sử dụng git rebase
 => Đầu tên checkout nhánh cần gộp (bug) và rebase với nhánh feature
 Lệnh:  git checkout bug
		git rebase feature
		
 
 
4. Phân biệt git merge và git rebase(giống, khác nhau, khi nào nên sử dụng)
 => Giống nhau: Đều cùng thực hiện lệnh gộp nhánh
				Khi gộp con - cha đều thành công
				Khi không bị conflict gộp nhánh thành công.
	Khác nhau: 
		4.1) Git Merge sẽ thực hiện lấy commit mới nhất so sánh nếu bị conflict fix xong commit
			Khi commit thì git luôn tạo ra một commit merge nhánh. 
			Trong lịch sự commit nào làm trước sẽ được đưa lên trước =>Lịch sử thể hiện ra nhiều nhánh gộp với nhau
		4.2) Git rebase sẽ có cơ chế thự hiện so sánh từ commit nếu có conflict thì fix còn không thì tiếp tục gộp với commit kế tiếp.
			Và lịch sử rebase sẽ ra kết quả là 1 nhánh không bị lộn xộn như 
 
 
5. Phân biệt git fetch và git clone
 => fetch: Lấy dữ liệu trung gian về local.
    clone sẽ liên kết và lấy dữ liện từ remote về
 
6. Phân biệt git fetch và git pull
 => fetch: chỉ lấy dữ liệu từ trung gian về không tự động gộp với branch local
    pull: Vừa lấy dữ liệu về và vừa merge branch trung gian và branch local
	
7. Phân biệt git pull và git pull --rebase
=> pull: Vừa lấy dữ liệu về và vừa merge branch trung gian và branch local => kết quả sẽ tạo ra commit merge branch
  pull --rebase sẽ tương tự như lệnh git fetch + git rebase => sẽ không tạo ra commit merge branch

8. Git log dùng để làm gì
=> dùng để coi thông tin hash, nội dung commit

9. Git status dùng để làm gì
=> Để kiểm tra xem hiện tại trong local các file đang ở trạng thái nào : Untracking, modifile hay là ở Stage

10. Git add dùng để làm gì
=> Add file vào repository của git

11. Git commit dùng để làm gì
12. Mô tả lệnh để tạo branch ở local
13. Mô tả lệnh để xóa branch ở local
14. Mô tả lệnh để xóa branch ở remote
15. Nhánh trung gian là gì
16. Detach HEAD là gì
17. Phân biệt HEAD và BRANCH
18. Có mấy cách để xóa commit, mô tả và cho ví dụ
19. Liệt kê các trạng thái của file trong git, giải thích từng trạng thái
20. Mô tả các bước cần thực hiện khi nhận 1 task từ dự án, cho ví dụ