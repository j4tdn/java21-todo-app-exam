1. Viết chương trình/lệnh trong tập tin hoten.txt mô tả các bước thực hiện sơ đồ git tree sau đây
tại local
touch c1.txt
git add .
git commit -m "C1"

touch c2.txt
git add .
git commit -m "C2"

touch c3.txt
git add .
git commit -m "C3"

git checkout -b feature master
touch c4.txt
git add .
git commit -m "C4"

touch c5.txt
git add .
git commit -m "C5"

git checkout -b bug master
touch c6.txt
git add .
git commit -m "C6"

touch c7.txt
git add .
git commit -m "C7"

touch c8.txt
git add .
git commit -m "C8"

2. Viết lệnh thực hiện gộp nhánh bug vào nhánh feature sử dụng git merge

git checkout feature
git merge bug feature
3. Viết lệnh thực hiện gộp nhánh feature vào bug sử dụng git rebase
git checkout bug
git rebase feature
4. Phân biệt git merge và git rebase(giống, khác nhau, khi nào nên sử dụng)
-GIÓNG NHAU
 Merge và rebase đều dùng để gộp 2 nhánh không cùng trên 1 đường thẳng lại với nhau
-KHÁC NHAU
	+ Merge thường dùng để gộp 2 nhánh  khi chúng ta chỉnh sửa và trên mỗi nhánh có nhiều commit.
	+ Rebase thường dùng để gộp 2 nhánh khi có 1 dự án mới cần phải thực hiện cần Add vào repo.
5. Phân biệt git fetch và git clone
git fetch : dùng để cập nhập dữ liệu mới nhất từ repo.
git clone : nếu trong một máy local chưa có tài liệu nà của repo. Để quá trình thực hiện từ repo đến local không bị cònlic.
6. Phân biệt git fetch và git pull
-Git fetch : dùng để cập nhập và tải dữ liệu mới nhất từ repo về máy local
-Git pull : dùng  để cập nhập dư liệu từ repo về máy local và merge các dữ liệu mới nhất củ repo và máy local lại với nhau
7. Phân biệt git pull và git pull --rebase
-Git pull : dùng  để cập nhập dư liệu từ repo về máy local và merge các dữ liệu mới nhất củ repo và máy local lại với nhau
-Git pull --rebase : nó cũng giống như "Git pull" nhưng thay vì gộp lại theo kiểu merge thì "Git pull --rebase" Gộp theo kiểu REBASE
8. Git log dùng để làm gì
Git log dùng để gọi các lịch sử tạo ra và thời gian của các commit được upload.
9. Git status dùng để làm gì
Git status dùng để kiểu tra trạng thái của file
10. Git add dùng để làm gì
Git add dùng  để chuyển đổi trạng thái từ unktrack sang staged.
11. Git commit dùng để làm gì
Dùng để chuyển trạng thái cua file từ staged sang unmodifile
12. Mô tả lệnh để tạo branch ở local
Git checkout -b bug master (Tạo ra Branch bug từ master)
13. Mô tả lệnh để xóa branch ở local
Git checkout master
Git branch -D branch_to_be_deleted
14. Mô tả lệnh để xóa branch ở remote
Git push origin --delete developer_old
15. Nhánh trung gian là gì
Nhánh  trung gia được tạo ra như bản sao ở nhánh remote khi chúng ta đồ bộ dự án từ máy local
16. Detach HEAD là gì
Git sẽ tự động di chuyển con trỏ HEAD khi tạo một commit mới
17. Phân biệt HEAD và BRANCH
HEAD là nơi để chúng ta thực hiện .
BRANCH là nhánhmà chúng ta đang hơạc đang thức hiện.
Trong 1 chương trình chỉ có duy nhất một HEAD nhưng có thể có rất nhiều BRANCH
18. Có mấy cách để xóa commit, mô tả và cho ví dụ
19. Liệt kê các trạng thái của file trong git, giải thích từng trạng thái
-Untrack: Đây là trạng  thái khí chúng ta khởi tạo file
-modifile: Trạng thái file đc chỉnh sửa khí commit
-unmidifile: Trạng thái của file sau khí commit
-staged : là trạng chuẩn bị commit của một dự án.
20. Mô tả các bước cần thực hiện khi nhận 1 task từ dự án, cho ví dụ
B1: xác định version của dự án
B2: xác định version đó được code trên branch nào
B3:  Git fetch(hoặc git clone về)
B4: Tạo nhánh local trung gian ch dự án đs=ó.
B5: Coding
B6: Add, commit,push.